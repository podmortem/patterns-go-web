metadata:
  library_id: "go-middleware-patterns"
  version: "1.0.0"
  maintainer: "podmortem-community"
  compatibility: ["go-1.18+", "go-1.19+", "go-1.20+", "go-1.21+"]
  dependencies: []

categories:
  - middleware
  - authentication
  - logging
  - cors
  - rate_limiting
  - compression

patterns:
  - id: "go_middleware_panic"
    name: "Go Middleware Panic"
    
    primary_pattern:
      regex: "middleware.*panic|panic.*middleware|recover.*middleware|middleware.*runtime.*error"
      confidence: 0.91
    
    secondary_patterns:
      - regex: "runtime error.*invalid memory address|nil pointer dereference"
        weight: 0.7
        proximity_window: 15
      - regex: "http\\.Handler|http\\.HandlerFunc"
        weight: 0.5
        proximity_window: 25
      - regex: "defer.*recover|recover\\(\\)"
        weight: 0.6
        proximity_window: 20
    
    severity: "HIGH"
    category: ["panic", "middleware", "runtime"]
    
    remediation:
      description: "Go middleware encountered a runtime panic"
      common_causes:
        - "Nil pointer dereference in middleware logic"
        - "Unhandled edge cases in middleware"
        - "Type assertion failures"
        - "Concurrent access without synchronization"
      
      suggested_commands:
        - "Add panic recovery in middleware: defer recover()"
        - "Add nil checks before pointer operations"
        - "Use safe type assertions with ok pattern"
        - "Add proper error handling in middleware chain"
      
      documentation_links:
        - "https://golang.org/doc/effective_go#recover"
        - "https://golang.org/pkg/net/http/#Handler"
    
    context_extraction:
      lines_before: 20
      lines_after: 15
      include_stack_trace: true

  - id: "go_auth_middleware_failed"
    name: "Go Authentication Middleware Failed"
    
    primary_pattern:
      regex: "authentication.*failed|auth.*middleware.*error|unauthorized.*access|token.*validation.*failed"
      confidence: 0.88
    
    secondary_patterns:
      - regex: "JWT.*invalid|token.*expired|bearer.*token"
        weight: 0.7
        proximity_window: 20
      - regex: "401.*Unauthorized|403.*Forbidden"
        weight: 0.6
        proximity_window: 15
      - regex: "Authorization.*header|auth.*header.*missing"
        weight: 0.5
        proximity_window: 25
    
    severity: "MEDIUM"
    category: ["authentication", "security", "authorization"]
    
    remediation:
      description: "Go authentication middleware rejected request"
      common_causes:
        - "Missing or invalid authentication token"
        - "Expired JWT or session token"
        - "Incorrect token format or signature"
        - "Insufficient permissions for resource"
      
      suggested_commands:
        - "Check token format and expiration"
        - "Verify Authorization header format"
        - "Validate token signature and claims"
        - "Ensure proper token refresh mechanism"
      
      documentation_links:
        - "https://golang.org/pkg/crypto/jwt/"
        - "https://tools.ietf.org/html/rfc7519"
    
    context_extraction:
      lines_before: 12
      lines_after: 8

  - id: "go_cors_middleware_blocked"
    name: "Go CORS Middleware Blocked Request"
    
    primary_pattern:
      regex: "CORS.*blocked|cross.*origin.*blocked|preflight.*failed|origin.*not.*allowed"
      confidence: 0.86
    
    secondary_patterns:
      - regex: "Access-Control-Allow-Origin|Access-Control-Allow-Methods"
        weight: 0.7
        proximity_window: 20
      - regex: "OPTIONS.*request|preflight.*request"
        weight: 0.6
        proximity_window: 15
      - regex: "cors.*middleware|origin.*header"
        weight: 0.5
        proximity_window: 25
    
    severity: "MEDIUM"
    category: ["cors", "security", "browser_policy"]
    
    remediation:
      description: "Go CORS middleware blocked cross-origin request"
      common_causes:
        - "Origin not in allowed origins list"
        - "HTTP method not in allowed methods"
        - "Missing CORS headers in response"
        - "Preflight request handling issues"
      
      suggested_commands:
        - "Add origin to allowed origins list"
        - "Configure allowed methods and headers"
        - "Handle OPTIONS requests for preflight"
        - "Check browser developer tools for CORS errors"
      
      documentation_links:
        - "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
        - "https://golang.org/pkg/net/http/"
    
    context_extraction:
      lines_before: 10
      lines_after: 8

  - id: "go_rate_limit_exceeded"
    name: "Go Rate Limiting Exceeded"
    
    primary_pattern:
      regex: "rate.*limit.*exceeded|too.*many.*requests|429.*Too.*Many.*Requests|rate.*limiter.*blocked"
      confidence: 0.89
    
    secondary_patterns:
      - regex: "rate.*limiter|token.*bucket|sliding.*window"
        weight: 0.6
        proximity_window: 25
      - regex: "requests.*per.*second|requests.*per.*minute"
        weight: 0.5
        proximity_window: 20
      - regex: "X-RateLimit|Retry-After"
        weight: 0.4
        proximity_window: 15
    
    severity: "MEDIUM"
    category: ["rate_limiting", "throttling", "protection"]
    
    remediation:
      description: "Go rate limiting middleware blocked request"
      common_causes:
        - "Client exceeding configured request rate"
        - "Burst traffic beyond rate limit"
        - "Insufficient rate limit configuration"
        - "Missing rate limit exemptions"
      
      suggested_commands:
        - "Implement client-side request throttling"
        - "Increase rate limits if appropriate"
        - "Add exponential backoff for retries"
        - "Monitor and adjust rate limit settings"
      
      documentation_links:
        - "https://en.wikipedia.org/wiki/Rate_limiting"
        - "https://golang.org/x/time/rate"
    
    context_extraction:
      lines_before: 12
      lines_after: 8

  - id: "go_logging_middleware_error"
    name: "Go Logging Middleware Error"
    
    primary_pattern:
      regex: "logging.*middleware.*error|log.*write.*failed|logger.*error|log.*output.*error"
      confidence: 0.82
    
    secondary_patterns:
      - regex: "log\\.Printf|log\\.Println|logrus|zap"
        weight: 0.6
        proximity_window: 20
      - regex: "write.*log.*failed|log.*file.*error"
        weight: 0.7
        proximity_window: 15
      - regex: "access.*log|request.*log"
        weight: 0.4
        proximity_window: 25
    
    severity: "LOW"
    category: ["logging", "observability", "file_io"]
    
    remediation:
      description: "Go logging middleware encountered an error"
      common_causes:
        - "Log file write permissions issues"
        - "Disk space full for log files"
        - "Log rotation or archival problems"
        - "Network logging destination unavailable"
      
      suggested_commands:
        - "Check log file permissions and disk space"
        - "Configure log rotation and cleanup"
        - "Verify logging destination accessibility"
        - "Add fallback logging mechanisms"
      
      documentation_links:
        - "https://golang.org/pkg/log/"
        - "https://github.com/sirupsen/logrus"
    
    context_extraction:
      lines_before: 10
      lines_after: 8

  - id: "go_compression_middleware_error"
    name: "Go Compression Middleware Error"
    
    primary_pattern:
      regex: "compression.*error|gzip.*error|deflate.*error|compress.*middleware.*failed"
      confidence: 0.84
    
    secondary_patterns:
      - regex: "gzip\\.Writer|gzip\\.Reader|compress/gzip"
        weight: 0.6
        proximity_window: 20
      - regex: "Accept-Encoding|Content-Encoding"
        weight: 0.5
        proximity_window: 25
      - regex: "compression.*level|compression.*failed"
        weight: 0.7
        proximity_window: 15
    
    severity: "LOW"
    category: ["compression", "performance", "encoding"]
    
    remediation:
      description: "Go compression middleware failed to process response"
      common_causes:
        - "Unsupported compression algorithm"
        - "Compression level configuration issues"
        - "Memory constraints during compression"
        - "Client compression support problems"
      
      suggested_commands:
        - "Check supported compression algorithms"
        - "Configure appropriate compression levels"
        - "Monitor memory usage during compression"
        - "Add fallback for uncompressed responses"
      
      documentation_links:
        - "https://golang.org/pkg/compress/gzip/"
        - "https://golang.org/pkg/compress/flate/"
    
    context_extraction:
      lines_before: 10
      lines_after: 8

  - id: "go_middleware_timeout"
    name: "Go Middleware Timeout"
    
    primary_pattern:
      regex: "middleware.*timeout|timeout.*middleware|context.*deadline.*exceeded.*middleware"
      confidence: 0.87
    
    secondary_patterns:
      - regex: "context\\.WithTimeout|context\\.WithDeadline"
        weight: 0.6
        proximity_window: 25
      - regex: "timeout.*handler|request.*timeout"
        weight: 0.5
        proximity_window: 20
      - regex: "middleware.*chain.*timeout"
        weight: 0.4
        proximity_window: 30
    
    severity: "HIGH"
    category: ["timeout", "middleware", "performance"]
    
    remediation:
      description: "Go middleware processing exceeded timeout"
      common_causes:
        - "Long-running middleware operations"
        - "Blocking operations in middleware chain"
        - "Insufficient timeout configuration"
        - "Resource contention and delays"
      
      suggested_commands:
        - "Optimize slow middleware operations"
        - "Implement proper timeout handling"
        - "Use non-blocking operations in middleware"
        - "Configure appropriate timeout values"
      
      documentation_links:
        - "https://golang.org/pkg/context/"
        - "https://golang.org/pkg/net/http/#TimeoutHandler"
    
    context_extraction:
      lines_before: 15
      lines_after: 12
      include_stack_trace: true

  - id: "go_middleware_chain_broken"
    name: "Go Middleware Chain Broken"
    
    primary_pattern:
      regex: "middleware.*chain.*broken|handler.*not.*called|next.*handler.*missing|middleware.*chain.*error"
      confidence: 0.85
    
    secondary_patterns:
      - regex: "http\\.Handler|http\\.HandlerFunc"
        weight: 0.6
        proximity_window: 20
      - regex: "ServeHTTP|next\\(.*\\)|chain.*next"
        weight: 0.7
        proximity_window: 15
      - regex: "middleware.*stack|handler.*stack"
        weight: 0.5
        proximity_window: 25
    
    severity: "MEDIUM"
    category: ["middleware", "chain", "request_processing"]
    
    remediation:
      description: "Go middleware chain was interrupted or broken"
      common_causes:
        - "Middleware not calling next handler"
        - "Early return without calling ServeHTTP"
        - "Panic in middleware breaking chain"
        - "Incorrect middleware composition"
      
      suggested_commands:
        - "Ensure middleware calls next handler"
        - "Check for early returns in middleware"
        - "Add panic recovery to maintain chain"
        - "Review middleware composition order"
      
      documentation_links:
        - "https://golang.org/pkg/net/http/#Handler"
        - "https://golang.org/doc/articles/wiki/#tmp_6"
    
    context_extraction:
      lines_before: 15
      lines_after: 10

related_patterns:
  - id: "go_middleware_panic"
    related_to: ["go_middleware_timeout", "go_middleware_chain_broken"]
  - id: "go_auth_middleware_failed"
    related_to: ["go_cors_middleware_blocked"]
  - id: "go_rate_limit_exceeded"
    related_to: ["go_auth_middleware_failed"]
  - id: "go_middleware_timeout"
    related_to: ["go_middleware_chain_broken"]
