metadata:
  library_id: "grpc-service-patterns"
  version: "1.0.0"
  maintainer: "podmortem-community"
  compatibility: ["grpc-1.50+", "grpc-1.55+", "grpc-1.58+"]
  dependencies: []

categories:
  - grpc
  - microservices
  - protobuf
  - streaming
  - authentication
  - load_balancing

patterns:
  - id: "grpc_connection_failed"
    name: "gRPC Connection Failed"
    
    primary_pattern:
      regex: "grpc.*connection.*failed|rpc error.*unavailable|grpc.*dial.*failed|connection.*refused.*grpc"
      confidence: 0.92
    
    secondary_patterns:
      - regex: "grpc\\.Dial|grpc\\.DialContext"
        weight: 0.6
        proximity_window: 20
      - regex: "codes\\.Unavailable|UNAVAILABLE"
        weight: 0.7
        proximity_window: 15
      - regex: "transport.*connection.*broken|connection.*reset"
        weight: 0.5
        proximity_window: 25
    
    severity: "HIGH"
    category: ["connection", "network", "service_discovery"]
    
    remediation:
      description: "gRPC client failed to connect to server"
      common_causes:
        - "gRPC server not running or unreachable"
        - "Incorrect server address or port"
        - "Network connectivity issues"
        - "Load balancer or proxy configuration problems"
      
      suggested_commands:
        - "Verify gRPC server is running and accessible"
        - "Check server address and port configuration"
        - "Test network connectivity to gRPC server"
        - "Review load balancer and proxy settings"
      
      documentation_links:
        - "https://grpc.io/docs/guides/error/"
        - "https://grpc.io/docs/guides/keepalive/"
    
    context_extraction:
      lines_before: 15
      lines_after: 12
      include_stack_trace: true

  - id: "grpc_deadline_exceeded"
    name: "gRPC Deadline Exceeded"
    
    primary_pattern:
      regex: "grpc.*deadline.*exceeded|rpc error.*DeadlineExceeded|context.*deadline.*exceeded.*grpc|grpc.*timeout"
      confidence: 0.90
    
    secondary_patterns:
      - regex: "codes\\.DeadlineExceeded|DEADLINE_EXCEEDED"
        weight: 0.7
        proximity_window: 15
      - regex: "context\\.WithTimeout|context\\.WithDeadline"
        weight: 0.6
        proximity_window: 25
      - regex: "grpc.*call.*timeout|rpc.*timeout"
        weight: 0.5
        proximity_window: 20
    
    severity: "HIGH"
    category: ["timeout", "performance", "latency"]
    
    remediation:
      description: "gRPC call exceeded configured deadline"
      common_causes:
        - "Server processing time too long"
        - "Network latency issues"
        - "Insufficient timeout configuration"
        - "Resource contention on server"
      
      suggested_commands:
        - "Increase gRPC call timeout if appropriate"
        - "Optimize server-side processing logic"
        - "Monitor network latency and server performance"
        - "Implement proper timeout handling and retries"
      
      documentation_links:
        - "https://grpc.io/docs/guides/deadlines/"
        - "https://grpc.io/blog/deadlines/"
    
    context_extraction:
      lines_before: 15
      lines_after: 12

  - id: "grpc_authentication_failed"
    name: "gRPC Authentication Failed"
    
    primary_pattern:
      regex: "grpc.*authentication.*failed|rpc error.*Unauthenticated|grpc.*auth.*error|codes\\.Unauthenticated"
      confidence: 0.89
    
    secondary_patterns:
      - regex: "metadata.*auth|authorization.*header"
        weight: 0.6
        proximity_window: 20
      - regex: "JWT.*invalid|token.*expired|bearer.*token"
        weight: 0.7
        proximity_window: 25
      - regex: "TLS.*handshake|certificate.*error"
        weight: 0.5
        proximity_window: 30
    
    severity: "MEDIUM"
    category: ["authentication", "security", "authorization"]
    
    remediation:
      description: "gRPC authentication failed"
      common_causes:
        - "Invalid or expired authentication token"
        - "Missing authentication metadata"
        - "TLS certificate validation failures"
        - "Incorrect authentication configuration"
      
      suggested_commands:
        - "Check authentication token validity and format"
        - "Verify authentication metadata is included"
        - "Review TLS certificate configuration"
        - "Test authentication flow end-to-end"
      
      documentation_links:
        - "https://grpc.io/docs/guides/auth/"
        - "https://grpc.io/docs/guides/auth/#authentication-api"
    
    context_extraction:
      lines_before: 12
      lines_after: 10

  - id: "grpc_permission_denied"
    name: "gRPC Permission Denied"
    
    primary_pattern:
      regex: "grpc.*permission.*denied|rpc error.*PermissionDenied|codes\\.PermissionDenied|grpc.*forbidden"
      confidence: 0.88
    
    secondary_patterns:
      - regex: "authorization.*failed|access.*denied"
        weight: 0.6
        proximity_window: 20
      - regex: "role.*based|rbac.*denied|acl.*denied"
        weight: 0.5
        proximity_window: 25
      - regex: "insufficient.*privileges|unauthorized.*access"
        weight: 0.7
        proximity_window: 15
    
    severity: "MEDIUM"
    category: ["authorization", "security", "access_control"]
    
    remediation:
      description: "gRPC request denied due to insufficient permissions"
      common_causes:
        - "User lacks required permissions for operation"
        - "Role-based access control (RBAC) restrictions"
        - "Resource-specific access control failures"
        - "Service-to-service authorization issues"
      
      suggested_commands:
        - "Check user permissions and roles"
        - "Review RBAC configuration and policies"
        - "Verify service account permissions"
        - "Test authorization flow with different roles"
      
      documentation_links:
        - "https://grpc.io/docs/guides/auth/"
        - "https://cloud.google.com/docs/authentication"
    
    context_extraction:
      lines_before: 12
      lines_after: 8

  - id: "grpc_invalid_argument"
    name: "gRPC Invalid Argument"
    
    primary_pattern:
      regex: "grpc.*invalid.*argument|rpc error.*InvalidArgument|codes\\.InvalidArgument|grpc.*validation.*failed"
      confidence: 0.86
    
    secondary_patterns:
      - regex: "protobuf.*validation|proto.*unmarshal.*error"
        weight: 0.7
        proximity_window: 20
      - regex: "field.*validation|required.*field.*missing"
        weight: 0.6
        proximity_window: 15
      - regex: "invalid.*request|malformed.*request"
        weight: 0.5
        proximity_window: 25
    
    severity: "MEDIUM"
    category: ["validation", "protobuf", "request_processing"]
    
    remediation:
      description: "gRPC request contains invalid arguments"
      common_causes:
        - "Required fields missing from request"
        - "Field validation constraints not met"
        - "Invalid protobuf message format"
        - "Type mismatch in request fields"
      
      suggested_commands:
        - "Validate all required fields are provided"
        - "Check field value constraints and formats"
        - "Verify protobuf message structure"
        - "Add client-side validation before gRPC calls"
      
      documentation_links:
        - "https://grpc.io/docs/guides/error/"
        - "https://developers.google.com/protocol-buffers/docs/proto3"
    
    context_extraction:
      lines_before: 12
      lines_after: 8

  - id: "grpc_resource_exhausted"
    name: "gRPC Resource Exhausted"
    
    primary_pattern:
      regex: "grpc.*resource.*exhausted|rpc error.*ResourceExhausted|codes\\.ResourceExhausted|grpc.*rate.*limit"
      confidence: 0.87
    
    secondary_patterns:
      - regex: "quota.*exceeded|rate.*limit.*exceeded"
        weight: 0.7
        proximity_window: 20
      - regex: "too.*many.*requests|429.*Too.*Many"
        weight: 0.6
        proximity_window: 25
      - regex: "memory.*exhausted|cpu.*exhausted"
        weight: 0.5
        proximity_window: 30
    
    severity: "HIGH"
    category: ["rate_limiting", "resource_management", "quotas"]
    
    remediation:
      description: "gRPC server resources exhausted or quota exceeded"
      common_causes:
        - "Rate limiting thresholds exceeded"
        - "Server resource quotas reached"
        - "Memory or CPU exhaustion"
        - "Connection pool limits exceeded"
      
      suggested_commands:
        - "Implement client-side rate limiting"
        - "Scale server resources if appropriate"
        - "Add exponential backoff for retries"
        - "Monitor server resource utilization"
      
      documentation_links:
        - "https://grpc.io/docs/guides/error/"
        - "https://cloud.google.com/docs/quota"
    
    context_extraction:
      lines_before: 15
      lines_after: 12

  - id: "grpc_service_unavailable"
    name: "gRPC Service Unavailable"
    
    primary_pattern:
      regex: "grpc.*service.*unavailable|rpc error.*Unavailable|codes\\.Unavailable|grpc.*server.*down"
      confidence: 0.91
    
    secondary_patterns:
      - regex: "server.*shutdown|server.*maintenance"
        weight: 0.6
        proximity_window: 25
      - regex: "load.*balancer.*no.*backends|no.*healthy.*backends"
        weight: 0.7
        proximity_window: 20
      - regex: "service.*discovery.*failed|endpoint.*not.*found"
        weight: 0.5
        proximity_window: 30
    
    severity: "CRITICAL"
    category: ["service_availability", "load_balancing", "health_checks"]
    
    remediation:
      description: "gRPC service is unavailable"
      common_causes:
        - "All server instances are down"
        - "Load balancer has no healthy backends"
        - "Service discovery failures"
        - "Planned maintenance or deployments"
      
      suggested_commands:
        - "Check server health and availability"
        - "Verify load balancer backend health"
        - "Review service discovery configuration"
        - "Implement circuit breaker pattern"
      
      documentation_links:
        - "https://grpc.io/docs/guides/error/"
        - "https://grpc.io/docs/guides/load-balancing/"
    
    context_extraction:
      lines_before: 15
      lines_after: 12
      include_stack_trace: true

  - id: "grpc_streaming_error"
    name: "gRPC Streaming Error"
    
    primary_pattern:
      regex: "grpc.*stream.*error|stream.*closed|streaming.*rpc.*error|stream.*recv.*error"
      confidence: 0.85
    
    secondary_patterns:
      - regex: "stream\\.Send|stream\\.Recv"
        weight: 0.6
        proximity_window: 20
      - regex: "EOF.*stream|stream.*EOF"
        weight: 0.7
        proximity_window: 15
      - regex: "bidirectional.*stream|server.*stream|client.*stream"
        weight: 0.4
        proximity_window: 30
    
    severity: "MEDIUM"
    category: ["streaming", "connection", "data_transfer"]
    
    remediation:
      description: "gRPC streaming operation failed"
      common_causes:
        - "Stream closed by client or server"
        - "Network interruption during streaming"
        - "Stream timeout or deadline exceeded"
        - "Error in stream processing logic"
      
      suggested_commands:
        - "Add proper stream error handling"
        - "Implement stream reconnection logic"
        - "Check network stability for streaming"
        - "Monitor stream lifecycle and errors"
      
      documentation_links:
        - "https://grpc.io/docs/guides/streaming/"
        - "https://grpc.io/docs/tutorials/basic/go/"
    
    context_extraction:
      lines_before: 15
      lines_after: 10

  - id: "grpc_load_balancer_error"
    name: "gRPC Load Balancer Error"
    
    primary_pattern:
      regex: "grpc.*load.*balancer.*error|lb.*policy.*error|resolver.*error|picker.*error"
      confidence: 0.84
    
    secondary_patterns:
      - regex: "round.*robin|pick.*first|grpclb"
        weight: 0.6
        proximity_window: 25
      - regex: "resolver.*update.*error|endpoint.*resolution.*failed"
        weight: 0.7
        proximity_window: 20
      - regex: "balancer.*connection.*error|backend.*health.*check"
        weight: 0.5
        proximity_window: 30
    
    severity: "HIGH"
    category: ["load_balancing", "service_discovery", "connection_management"]
    
    remediation:
      description: "gRPC load balancer encountered an error"
      common_causes:
        - "Service discovery resolution failures"
        - "All backend servers unhealthy"
        - "Load balancer configuration errors"
        - "Network connectivity to backends"
      
      suggested_commands:
        - "Check service discovery configuration"
        - "Verify backend server health and availability"
        - "Review load balancer policy settings"
        - "Monitor backend connection status"
      
      documentation_links:
        - "https://grpc.io/docs/guides/load-balancing/"
        - "https://github.com/grpc/grpc/blob/master/doc/load-balancing.md"
    
    context_extraction:
      lines_before: 15
      lines_after: 12

related_patterns:
  - id: "grpc_connection_failed"
    related_to: ["grpc_service_unavailable", "grpc_load_balancer_error"]
  - id: "grpc_deadline_exceeded"
    related_to: ["grpc_resource_exhausted", "grpc_streaming_error"]
  - id: "grpc_authentication_failed"
    related_to: ["grpc_permission_denied"]
  - id: "grpc_service_unavailable"
    related_to: ["grpc_load_balancer_error"]
